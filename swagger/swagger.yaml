openapi: 3.0.0
info:
  title: Auth API
  version: 1.0.0
  description: >
    API documentation for authentication. This route uses an HttpOnly cookie for auth. You must log in first before accessing protected routes.

servers:
  - url: http://localhost:5000/api
    description: Local development
  - url: https://chatapp-backend-vws5.onrender.com/api
    description: Production server
tags:
  - name: Auth
    description: Authentication & Authorization routes
  - name: User
    description: Operations for managing user accounts.
  - name: Profile
    description: Operations for interacting with a users profile info.

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # $ref: './schemas/authSchemas.yaml#/components/schemas/LoginRequest'
              type: object
              required:
                - email
                - password
                - rememberMe
              properties:
                email:
                  type: string
                  format: email
                  example: taotech@test.com
                password:
                  type: string
                  example: password123
                rememberMe:
                  type: boolean
                  example: false
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                # $ref: './schemas/authSchemas.yaml#/components/schemas/LoginSuccess'
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                          username:
                            type: string
                          email:
                            type: string
                          status:
                            type: string
                          emailVerified:
                            type: boolean
                          role:
                            type: string
                          oauthProvider:
                            type: string
                          authProvider:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                # $ref: "./schemas/authSchemas.yaml#/components/schemas/ErrorResponse"
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: kami
                email:
                  type: string
                  format: email
                  example: taotech@test.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: Registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registration successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                          username:
                            type: string
                          email:
                            type: string
                          status:
                            type: string
                          emailVerified:
                            type: boolean
                          role:
                            type: string
                          oauthProvider:
                            type: string
                          authProvider:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                # $ref: "./schemas/authSchemas.yaml#/components/schemas/ErrorResponse"
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                # $ref: "./schemas/authSchemas.yaml#/components/schemas/LogoutSuccess"
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully

        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                # $ref: "./schemas/authSchemas.yaml#/components/schemas/ErrorResponse"
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized access
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Get password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: taotech@test.com
      responses:
        "200":
          description: Password reset link sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset link sent to your email address.
        "403":
          description: Password reset unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 403
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Password reset is unavailable as you have exceeded the maximum number of attempts. Try again after 24 hours."
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - password
                - token
              properties:
                userId:
                  type: string
                  example: 6847c5a4e087c7014f7e2174
                password:
                  type: string
                  example: "23456734"
                token:
                  type: string
                  example: $2b$10$jQma0LfC25SgFyszV4dmUuT6HGcRpxTutAeZOfgckpVcIDxQsIlb2
      responses:
        "200":
          description: Password reset success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successful.
        "403":
          description: Invalid reset link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 403
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid reset link!"
        "401":
          description: Invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid token"
  /auth/verify-email/{email}:
    get:
      tags:
        - Auth
      summary: Request Email Verification
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: The email address to verify.
      responses:
        "200":
          description: Email verification request success.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Email verification link sent to your email.
        "403":
          description: Email already verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 403
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Email is already verified"
        "404":
          description: Email not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Email not found"
  /auth/verify-email:
    post:
      tags:
        - Auth
      summary: Email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - token
              properties:
                userId:
                  type: string
                  example: 6847c5a4e087c7014f7e2174
                token:
                  type: string
                  example: $2b$10$jQma0LfC25SgFyszV4dmUuT6HGcRpxTutAeZOfgckpVcIDxQsIlb2
      responses:
        "200":
          description: Email verification response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    enum:
                      - "Email verified successfully."
                      - "Email already verified"
        "403":
          description: Invalid verification link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 403
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid verification link!"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User not found"
  /user:
    get:
      tags:
        - User
      summary: Get data for the currently authenticated user
      description: Retrieves the User information for the user who is currently logged in.
      responses:
        "200":
          description: Successfully retrieved user data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User data retrieved successfully." # More appropriate message
                  data: # Changed to 'data' to hold the actual user object
                    type: object
                    properties:
                      oauthProvider:
                        type: string
                        example: "local"
                      _id:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                      username:
                        type: string
                        example: "john_doe"
                      email:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      status:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      emailVerified:
                        type: boolean
                        example: "false"
                      role:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      authProvider:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      # Add other user properties as needed
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time

        "401":
          description: Unauthorized - User is not logged in or token is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Authentication required. Please log in." # More appropriate message for 401
  /profile:
    get:
      tags:
        - Profile
      summary: Get data for the authenticated user's own profile
      description: Retrieves the profile information for the user who is currently logged in.
      responses:
        "200":
          description: Successfully retrieved the authenticated user's profile data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                      username:
                        type: string
                        example: "john_doe"
                      email:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      # Add other profile properties as needed (e.g., firstName, lastName, bio, avatarUrl)
                      firstName:
                        type: string
                        example: "John"
                      lastName:
                        type: string
                        example: "Doe"
                      bio:
                        type: string
                        nullable: true
                        example: "Software developer passionate about NestJS."
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                    required:
                      - id
                      - username
                      - email
                  message:
                    type: string
                    example: "Profile fetched successfully."

        "401":
          description: Unauthorized - User is not logged in or token is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Authentication required. Please log in."

        "404":
          description: Profile not found for the authenticated user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User profile not found."
  /profile/{userId}:
    get:
      tags:
        - Profile
      summary: Get a specific user's profile data by ID
      description: Retrieves the profile information for a specific user, identified by their ID in the URL path.
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: objectId
            pattern: "^[0-9a-fA-F]{24}$" # Regex for a 24-char hex string
          required: true
          description: The ID of the user whose profile is to be retrieved.
    responses:
      "200":
        description: Successfully retrieved the specified user's profile data.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  example: 200
                success:
                  type: boolean
                  example: true
                data:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    username:
                      type: string
                      example: "another_user"
                    email:
                      type: string
                      format: email
                      example: "another.user@example.com"
                    firstName:
                      type: string
                      example: "Jane"
                    lastName:
                      type: string
                      example: "Doe"
                    bio:
                      type: string
                      nullable: true
                      example: "Enthusiastic front-end developer."
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
                  required:
                    - id
                    - username
                    - email
                message:
                  type: string
                  example: "Profile fetched successfully."

      "401":
        description: Unauthorized - User is not logged in or token is invalid.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  example: 401
                success:
                  type: boolean
                  example: false
                message:
                  type: string
                  example: "Authentication required. Please log in."

      "403": # Add 403 for Forbidden if user tries to access a profile they don't have permission for
        description: Forbidden - User does not have permission to view this profile.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  example: 403
                success:
                  type: boolean
                  example: false
                message:
                  type: string
                  example: "Access denied. You do not have permission to view this profile."

      "404":
        description: Profile not found for the given userId.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  example: 404
                success:
                  type: boolean
                  example: false
                message:
                  type: string
                  example: "User profile not found."
